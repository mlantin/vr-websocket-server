// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VRCom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VRCom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VRCom {

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Joystick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Joystick_reflection_ = NULL;
const ::google::protobuf::Descriptor* MocapSubject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MocapSubject_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wiimote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wiimote_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mocap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mocap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mocap_SubjectsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Hydra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hydra_reflection_ = NULL;
const ::google::protobuf::Descriptor* Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Update_reflection_ = NULL;
struct UpdateOneofInstance {
  const ::VRCom::Mocap* mocap_;
  const ::VRCom::Hydra* hydra_;
  const ::VRCom::Wiimote* wiimote_;
}* Update_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_VRCom_2eproto() {
  protobuf_AddDesc_VRCom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VRCom.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      -1,
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _is_default_instance_));
  Rotation_descriptor_ = file->message_type(1);
  static const int Rotation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, w_),
  };
  Rotation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rotation_descriptor_,
      Rotation::default_instance_,
      Rotation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rotation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotation, _is_default_instance_));
  Joystick_descriptor_ = file->message_type(2);
  static const int Joystick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, y_),
  };
  Joystick_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Joystick_descriptor_,
      Joystick::default_instance_,
      Joystick_offsets_,
      -1,
      -1,
      -1,
      sizeof(Joystick),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joystick, _is_default_instance_));
  MocapSubject_descriptor_ = file->message_type(3);
  static const int MocapSubject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MocapSubject, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MocapSubject, rot_),
  };
  MocapSubject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MocapSubject_descriptor_,
      MocapSubject::default_instance_,
      MocapSubject_offsets_,
      -1,
      -1,
      -1,
      sizeof(MocapSubject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MocapSubject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MocapSubject, _is_default_instance_));
  Wiimote_descriptor_ = file->message_type(4);
  static const int Wiimote_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wiimote, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wiimote, buttons_pressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wiimote, buttons_released_),
  };
  Wiimote_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Wiimote_descriptor_,
      Wiimote::default_instance_,
      Wiimote_offsets_,
      -1,
      -1,
      -1,
      sizeof(Wiimote),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wiimote, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wiimote, _is_default_instance_));
  Mocap_descriptor_ = file->message_type(5);
  static const int Mocap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mocap, subjects_),
  };
  Mocap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mocap_descriptor_,
      Mocap::default_instance_,
      Mocap_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mocap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mocap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mocap, _is_default_instance_));
  Mocap_SubjectsEntry_descriptor_ = Mocap_descriptor_->nested_type(0);
  Hydra_descriptor_ = file->message_type(6);
  static const int Hydra_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, ctrl_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, joy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, buttons_),
  };
  Hydra_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Hydra_descriptor_,
      Hydra::default_instance_,
      Hydra_offsets_,
      -1,
      -1,
      -1,
      sizeof(Hydra),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hydra, _is_default_instance_));
  Update_descriptor_ = file->message_type(7);
  static const int Update_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Update_default_oneof_instance_, mocap_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Update_default_oneof_instance_, hydra_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Update_default_oneof_instance_, wiimote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, vrmsg_),
  };
  Update_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Update_descriptor_,
      Update::default_instance_,
      Update_offsets_,
      -1,
      -1,
      -1,
      Update_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _oneof_case_[0]),
      sizeof(Update),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VRCom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rotation_descriptor_, &Rotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Joystick_descriptor_, &Joystick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MocapSubject_descriptor_, &MocapSubject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Wiimote_descriptor_, &Wiimote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mocap_descriptor_, &Mocap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Mocap_SubjectsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::VRCom::MocapSubject,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Mocap_SubjectsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Hydra_descriptor_, &Hydra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Update_descriptor_, &Update::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VRCom_2eproto() {
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Rotation::default_instance_;
  delete Rotation_reflection_;
  delete Joystick::default_instance_;
  delete Joystick_reflection_;
  delete MocapSubject::default_instance_;
  delete MocapSubject_reflection_;
  delete Wiimote::default_instance_;
  delete Wiimote_reflection_;
  delete Mocap::default_instance_;
  delete Mocap_reflection_;
  delete Hydra::default_instance_;
  delete Hydra_reflection_;
  delete Update::default_instance_;
  delete Update_default_oneof_instance_;
  delete Update_reflection_;
}

void protobuf_AddDesc_VRCom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013VRCom.proto\022\005VRCom\"+\n\010Position\022\t\n\001x\030\001 "
    "\001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"6\n\010Rotation\022\t\n"
    "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001("
    "\002\" \n\010Joystick\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"J\n\014M"
    "ocapSubject\022\034\n\003pos\030\001 \001(\0132\017.VRCom.Positio"
    "n\022\034\n\003rot\030\002 \001(\0132\017.VRCom.Rotation\"H\n\007Wiimo"
    "te\022\n\n\002id\030\001 \001(\005\022\027\n\017buttons_pressed\030\002 \001(\r\022"
    "\030\n\020Buttons_released\030\003 \001(\r\"{\n\005Mocap\022,\n\010su"
    "bjects\030\001 \003(\0132\032.VRCom.Mocap.SubjectsEntry"
    "\032D\n\rSubjectsEntry\022\013\n\003key\030\001 \001(\t\022\"\n\005value\030"
    "\002 \001(\0132\023.VRCom.MocapSubject:\0028\001\"\225\001\n\005Hydra"
    "\022\020\n\010ctrl_num\030\001 \001(\005\022\034\n\003pos\030\002 \001(\0132\017.VRCom."
    "Position\022\034\n\003rot\030\003 \001(\0132\017.VRCom.Rotation\022\034"
    "\n\003joy\030\004 \001(\0132\017.VRCom.Joystick\022\017\n\007trigger\030"
    "\005 \001(\002\022\017\n\007buttons\030\006 \001(\005\"r\n\006Update\022\035\n\005moca"
    "p\030\001 \001(\0132\014.VRCom.MocapH\000\022\035\n\005hydra\030\002 \001(\0132\014"
    ".VRCom.HydraH\000\022!\n\007wiimote\030\003 \001(\0132\016.VRCom."
    "WiimoteH\000B\007\n\005vrmsgB\030\252\002\025Google.Protobuf.V"
    "RComb\006proto3", 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VRCom.proto", &protobuf_RegisterTypes);
  Position::default_instance_ = new Position();
  Rotation::default_instance_ = new Rotation();
  Joystick::default_instance_ = new Joystick();
  MocapSubject::default_instance_ = new MocapSubject();
  Wiimote::default_instance_ = new Wiimote();
  Mocap::default_instance_ = new Mocap();
  Hydra::default_instance_ = new Hydra();
  Update::default_instance_ = new Update();
  Update_default_oneof_instance_ = new UpdateOneofInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Rotation::default_instance_->InitAsDefaultInstance();
  Joystick::default_instance_->InitAsDefaultInstance();
  MocapSubject::default_instance_->InitAsDefaultInstance();
  Wiimote::default_instance_->InitAsDefaultInstance();
  Mocap::default_instance_->InitAsDefaultInstance();
  Hydra::default_instance_->InitAsDefaultInstance();
  Update::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VRCom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VRCom_2eproto {
  StaticDescriptorInitializer_VRCom_2eproto() {
    protobuf_AddDesc_VRCom_2eproto();
  }
} static_descriptor_initializer_VRCom_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.Position)
}

void Position::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.Position)
}

void Position::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:VRCom.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:VRCom.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.Position)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional float x = 1;
void Position::clear_x() {
  x_ = 0;
}
 float Position::x() const {
  // @@protoc_insertion_point(field_get:VRCom.Position.x)
  return x_;
}
 void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Position.x)
}

// optional float y = 2;
void Position::clear_y() {
  y_ = 0;
}
 float Position::y() const {
  // @@protoc_insertion_point(field_get:VRCom.Position.y)
  return y_;
}
 void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Position.y)
}

// optional float z = 3;
void Position::clear_z() {
  z_ = 0;
}
 float Position::z() const {
  // @@protoc_insertion_point(field_get:VRCom.Position.z)
  return z_;
}
 void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Position.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rotation::kXFieldNumber;
const int Rotation::kYFieldNumber;
const int Rotation::kZFieldNumber;
const int Rotation::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rotation::Rotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.Rotation)
}

void Rotation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rotation::Rotation(const Rotation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.Rotation)
}

void Rotation::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
}

Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:VRCom.Rotation)
  SharedDtor();
}

void Rotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rotation_descriptor_;
}

const Rotation& Rotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

Rotation* Rotation::default_instance_ = NULL;

Rotation* Rotation::New(::google::protobuf::Arena* arena) const {
  Rotation* n = new Rotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rotation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rotation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Rotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.Rotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.Rotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.Rotation)
  return false;
#undef DO_
}

void Rotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.Rotation)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:VRCom.Rotation)
}

::google::protobuf::uint8* Rotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.Rotation)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.Rotation)
  return target;
}

int Rotation::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rotation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rotation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rotation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rotation::MergeFrom(const Rotation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Rotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rotation::CopyFrom(const Rotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotation::IsInitialized() const {

  return true;
}

void Rotation::Swap(Rotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rotation::InternalSwap(Rotation* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rotation_descriptor_;
  metadata.reflection = Rotation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rotation

// optional float x = 1;
void Rotation::clear_x() {
  x_ = 0;
}
 float Rotation::x() const {
  // @@protoc_insertion_point(field_get:VRCom.Rotation.x)
  return x_;
}
 void Rotation::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Rotation.x)
}

// optional float y = 2;
void Rotation::clear_y() {
  y_ = 0;
}
 float Rotation::y() const {
  // @@protoc_insertion_point(field_get:VRCom.Rotation.y)
  return y_;
}
 void Rotation::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Rotation.y)
}

// optional float z = 3;
void Rotation::clear_z() {
  z_ = 0;
}
 float Rotation::z() const {
  // @@protoc_insertion_point(field_get:VRCom.Rotation.z)
  return z_;
}
 void Rotation::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Rotation.z)
}

// optional float w = 4;
void Rotation::clear_w() {
  w_ = 0;
}
 float Rotation::w() const {
  // @@protoc_insertion_point(field_get:VRCom.Rotation.w)
  return w_;
}
 void Rotation::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Rotation.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Joystick::kXFieldNumber;
const int Joystick::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Joystick::Joystick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.Joystick)
}

void Joystick::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Joystick::Joystick(const Joystick& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.Joystick)
}

void Joystick::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Joystick::~Joystick() {
  // @@protoc_insertion_point(destructor:VRCom.Joystick)
  SharedDtor();
}

void Joystick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Joystick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joystick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joystick_descriptor_;
}

const Joystick& Joystick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

Joystick* Joystick::default_instance_ = NULL;

Joystick* Joystick::New(::google::protobuf::Arena* arena) const {
  Joystick* n = new Joystick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Joystick::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Joystick*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Joystick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.Joystick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.Joystick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.Joystick)
  return false;
#undef DO_
}

void Joystick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.Joystick)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:VRCom.Joystick)
}

::google::protobuf::uint8* Joystick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.Joystick)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.Joystick)
  return target;
}

int Joystick::ByteSize() const {
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joystick::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Joystick* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Joystick>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Joystick::MergeFrom(const Joystick& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Joystick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joystick::CopyFrom(const Joystick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joystick::IsInitialized() const {

  return true;
}

void Joystick::Swap(Joystick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Joystick::InternalSwap(Joystick* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Joystick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Joystick_descriptor_;
  metadata.reflection = Joystick_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Joystick

// optional float x = 1;
void Joystick::clear_x() {
  x_ = 0;
}
 float Joystick::x() const {
  // @@protoc_insertion_point(field_get:VRCom.Joystick.x)
  return x_;
}
 void Joystick::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Joystick.x)
}

// optional float y = 2;
void Joystick::clear_y() {
  y_ = 0;
}
 float Joystick::y() const {
  // @@protoc_insertion_point(field_get:VRCom.Joystick.y)
  return y_;
}
 void Joystick::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Joystick.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MocapSubject::kPosFieldNumber;
const int MocapSubject::kRotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MocapSubject::MocapSubject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.MocapSubject)
}

void MocapSubject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pos_ = const_cast< ::VRCom::Position*>(&::VRCom::Position::default_instance());
  rot_ = const_cast< ::VRCom::Rotation*>(&::VRCom::Rotation::default_instance());
}

MocapSubject::MocapSubject(const MocapSubject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.MocapSubject)
}

void MocapSubject::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pos_ = NULL;
  rot_ = NULL;
}

MocapSubject::~MocapSubject() {
  // @@protoc_insertion_point(destructor:VRCom.MocapSubject)
  SharedDtor();
}

void MocapSubject::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rot_;
  }
}

void MocapSubject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MocapSubject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MocapSubject_descriptor_;
}

const MocapSubject& MocapSubject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

MocapSubject* MocapSubject::default_instance_ = NULL;

MocapSubject* MocapSubject::New(::google::protobuf::Arena* arena) const {
  MocapSubject* n = new MocapSubject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MocapSubject::Clear() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
}

bool MocapSubject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.MocapSubject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .VRCom.Position pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rot;
        break;
      }

      // optional .VRCom.Rotation rot = 2;
      case 2: {
        if (tag == 18) {
         parse_rot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.MocapSubject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.MocapSubject)
  return false;
#undef DO_
}

void MocapSubject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.MocapSubject)
  // optional .VRCom.Position pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional .VRCom.Rotation rot = 2;
  if (this->has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rot_, output);
  }

  // @@protoc_insertion_point(serialize_end:VRCom.MocapSubject)
}

::google::protobuf::uint8* MocapSubject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.MocapSubject)
  // optional .VRCom.Position pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->pos_, target);
  }

  // optional .VRCom.Rotation rot = 2;
  if (this->has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->rot_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.MocapSubject)
  return target;
}

int MocapSubject::ByteSize() const {
  int total_size = 0;

  // optional .VRCom.Position pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // optional .VRCom.Rotation rot = 2;
  if (this->has_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MocapSubject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MocapSubject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MocapSubject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MocapSubject::MergeFrom(const MocapSubject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_pos()) {
    mutable_pos()->::VRCom::Position::MergeFrom(from.pos());
  }
  if (from.has_rot()) {
    mutable_rot()->::VRCom::Rotation::MergeFrom(from.rot());
  }
}

void MocapSubject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MocapSubject::CopyFrom(const MocapSubject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MocapSubject::IsInitialized() const {

  return true;
}

void MocapSubject::Swap(MocapSubject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MocapSubject::InternalSwap(MocapSubject* other) {
  std::swap(pos_, other->pos_);
  std::swap(rot_, other->rot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MocapSubject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MocapSubject_descriptor_;
  metadata.reflection = MocapSubject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MocapSubject

// optional .VRCom.Position pos = 1;
bool MocapSubject::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void MocapSubject::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::VRCom::Position& MocapSubject::pos() const {
  // @@protoc_insertion_point(field_get:VRCom.MocapSubject.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::VRCom::Position* MocapSubject::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::VRCom::Position;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.MocapSubject.pos)
  return pos_;
}
::VRCom::Position* MocapSubject::release_pos() {
  
  ::VRCom::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
void MocapSubject::set_allocated_pos(::VRCom::Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.MocapSubject.pos)
}

// optional .VRCom.Rotation rot = 2;
bool MocapSubject::has_rot() const {
  return !_is_default_instance_ && rot_ != NULL;
}
void MocapSubject::clear_rot() {
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
}
const ::VRCom::Rotation& MocapSubject::rot() const {
  // @@protoc_insertion_point(field_get:VRCom.MocapSubject.rot)
  return rot_ != NULL ? *rot_ : *default_instance_->rot_;
}
::VRCom::Rotation* MocapSubject::mutable_rot() {
  
  if (rot_ == NULL) {
    rot_ = new ::VRCom::Rotation;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.MocapSubject.rot)
  return rot_;
}
::VRCom::Rotation* MocapSubject::release_rot() {
  
  ::VRCom::Rotation* temp = rot_;
  rot_ = NULL;
  return temp;
}
void MocapSubject::set_allocated_rot(::VRCom::Rotation* rot) {
  delete rot_;
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.MocapSubject.rot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wiimote::kIdFieldNumber;
const int Wiimote::kButtonsPressedFieldNumber;
const int Wiimote::kButtonsReleasedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wiimote::Wiimote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.Wiimote)
}

void Wiimote::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Wiimote::Wiimote(const Wiimote& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.Wiimote)
}

void Wiimote::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  buttons_pressed_ = 0u;
  buttons_released_ = 0u;
}

Wiimote::~Wiimote() {
  // @@protoc_insertion_point(destructor:VRCom.Wiimote)
  SharedDtor();
}

void Wiimote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Wiimote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wiimote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wiimote_descriptor_;
}

const Wiimote& Wiimote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

Wiimote* Wiimote::default_instance_ = NULL;

Wiimote* Wiimote::New(::google::protobuf::Arena* arena) const {
  Wiimote* n = new Wiimote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wiimote::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Wiimote*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, buttons_released_);

#undef ZR_HELPER_
#undef ZR_

}

bool Wiimote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.Wiimote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buttons_pressed;
        break;
      }

      // optional uint32 buttons_pressed = 2;
      case 2: {
        if (tag == 16) {
         parse_buttons_pressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buttons_pressed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Buttons_released;
        break;
      }

      // optional uint32 Buttons_released = 3;
      case 3: {
        if (tag == 24) {
         parse_Buttons_released:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buttons_released_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.Wiimote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.Wiimote)
  return false;
#undef DO_
}

void Wiimote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.Wiimote)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 buttons_pressed = 2;
  if (this->buttons_pressed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buttons_pressed(), output);
  }

  // optional uint32 Buttons_released = 3;
  if (this->buttons_released() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buttons_released(), output);
  }

  // @@protoc_insertion_point(serialize_end:VRCom.Wiimote)
}

::google::protobuf::uint8* Wiimote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.Wiimote)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 buttons_pressed = 2;
  if (this->buttons_pressed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buttons_pressed(), target);
  }

  // optional uint32 Buttons_released = 3;
  if (this->buttons_released() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buttons_released(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.Wiimote)
  return target;
}

int Wiimote::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional uint32 buttons_pressed = 2;
  if (this->buttons_pressed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buttons_pressed());
  }

  // optional uint32 Buttons_released = 3;
  if (this->buttons_released() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buttons_released());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wiimote::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Wiimote* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Wiimote>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wiimote::MergeFrom(const Wiimote& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.buttons_pressed() != 0) {
    set_buttons_pressed(from.buttons_pressed());
  }
  if (from.buttons_released() != 0) {
    set_buttons_released(from.buttons_released());
  }
}

void Wiimote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiimote::CopyFrom(const Wiimote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiimote::IsInitialized() const {

  return true;
}

void Wiimote::Swap(Wiimote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wiimote::InternalSwap(Wiimote* other) {
  std::swap(id_, other->id_);
  std::swap(buttons_pressed_, other->buttons_pressed_);
  std::swap(buttons_released_, other->buttons_released_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wiimote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wiimote_descriptor_;
  metadata.reflection = Wiimote_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wiimote

// optional int32 id = 1;
void Wiimote::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Wiimote::id() const {
  // @@protoc_insertion_point(field_get:VRCom.Wiimote.id)
  return id_;
}
 void Wiimote::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Wiimote.id)
}

// optional uint32 buttons_pressed = 2;
void Wiimote::clear_buttons_pressed() {
  buttons_pressed_ = 0u;
}
 ::google::protobuf::uint32 Wiimote::buttons_pressed() const {
  // @@protoc_insertion_point(field_get:VRCom.Wiimote.buttons_pressed)
  return buttons_pressed_;
}
 void Wiimote::set_buttons_pressed(::google::protobuf::uint32 value) {
  
  buttons_pressed_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Wiimote.buttons_pressed)
}

// optional uint32 Buttons_released = 3;
void Wiimote::clear_buttons_released() {
  buttons_released_ = 0u;
}
 ::google::protobuf::uint32 Wiimote::buttons_released() const {
  // @@protoc_insertion_point(field_get:VRCom.Wiimote.Buttons_released)
  return buttons_released_;
}
 void Wiimote::set_buttons_released(::google::protobuf::uint32 value) {
  
  buttons_released_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Wiimote.Buttons_released)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mocap::kSubjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mocap::Mocap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.Mocap)
}

void Mocap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mocap::Mocap(const Mocap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.Mocap)
}

void Mocap::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  subjects_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  subjects_.SetEntryDescriptor(
      &::VRCom::Mocap_SubjectsEntry_descriptor_);
}

Mocap::~Mocap() {
  // @@protoc_insertion_point(destructor:VRCom.Mocap)
  SharedDtor();
}

void Mocap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mocap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mocap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mocap_descriptor_;
}

const Mocap& Mocap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

Mocap* Mocap::default_instance_ = NULL;

Mocap* Mocap::New(::google::protobuf::Arena* arena) const {
  Mocap* n = new Mocap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mocap::Clear() {
  subjects_.Clear();
}

bool Mocap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.Mocap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .VRCom.MocapSubject> subjects = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_subjects:
          ::google::protobuf::scoped_ptr<Mocap_SubjectsEntry> entry(subjects_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_subjects())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "VRCom.Mocap.SubjectsEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_subjects;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.Mocap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.Mocap)
  return false;
#undef DO_
}

void Mocap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.Mocap)
  // map<string, .VRCom.MocapSubject> subjects = 1;
  {
    ::google::protobuf::scoped_ptr<Mocap_SubjectsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::VRCom::MocapSubject >::const_iterator
        it = this->subjects().begin();
        it != this->subjects().end(); ++it) {
      entry.reset(subjects_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          1, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "VRCom.Mocap.SubjectsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:VRCom.Mocap)
}

::google::protobuf::uint8* Mocap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.Mocap)
  // map<string, .VRCom.MocapSubject> subjects = 1;
  {
    ::google::protobuf::scoped_ptr<Mocap_SubjectsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::VRCom::MocapSubject >::const_iterator
        it = this->subjects().begin();
        it != this->subjects().end(); ++it) {
      entry.reset(subjects_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              1, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "VRCom.Mocap.SubjectsEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.Mocap)
  return target;
}

int Mocap::ByteSize() const {
  int total_size = 0;

  // map<string, .VRCom.MocapSubject> subjects = 1;
  total_size += 1 * this->subjects_size();
  {
    ::google::protobuf::scoped_ptr<Mocap_SubjectsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::VRCom::MocapSubject >::const_iterator
        it = this->subjects().begin();
        it != this->subjects().end(); ++it) {
      entry.reset(subjects_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mocap::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mocap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mocap>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mocap::MergeFrom(const Mocap& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  subjects_.MergeFrom(from.subjects_);
}

void Mocap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mocap::CopyFrom(const Mocap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mocap::IsInitialized() const {

  return true;
}

void Mocap::Swap(Mocap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mocap::InternalSwap(Mocap* other) {
  subjects_.Swap(&other->subjects_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mocap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mocap_descriptor_;
  metadata.reflection = Mocap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mocap

// map<string, .VRCom.MocapSubject> subjects = 1;
int Mocap::subjects_size() const {
  return subjects_.size();
}
void Mocap::clear_subjects() {
  subjects_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::VRCom::MocapSubject >&
Mocap::subjects() const {
  // @@protoc_insertion_point(field_map:VRCom.Mocap.subjects)
  return subjects_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::VRCom::MocapSubject >*
Mocap::mutable_subjects() {
  // @@protoc_insertion_point(field_mutable_map:VRCom.Mocap.subjects)
  return subjects_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hydra::kCtrlNumFieldNumber;
const int Hydra::kPosFieldNumber;
const int Hydra::kRotFieldNumber;
const int Hydra::kJoyFieldNumber;
const int Hydra::kTriggerFieldNumber;
const int Hydra::kButtonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hydra::Hydra()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.Hydra)
}

void Hydra::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  pos_ = const_cast< ::VRCom::Position*>(&::VRCom::Position::default_instance());
  rot_ = const_cast< ::VRCom::Rotation*>(&::VRCom::Rotation::default_instance());
  joy_ = const_cast< ::VRCom::Joystick*>(&::VRCom::Joystick::default_instance());
}

Hydra::Hydra(const Hydra& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.Hydra)
}

void Hydra::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ctrl_num_ = 0;
  pos_ = NULL;
  rot_ = NULL;
  joy_ = NULL;
  trigger_ = 0;
  buttons_ = 0;
}

Hydra::~Hydra() {
  // @@protoc_insertion_point(destructor:VRCom.Hydra)
  SharedDtor();
}

void Hydra::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete rot_;
    delete joy_;
  }
}

void Hydra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hydra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hydra_descriptor_;
}

const Hydra& Hydra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

Hydra* Hydra::default_instance_ = NULL;

Hydra* Hydra::New(::google::protobuf::Arena* arena) const {
  Hydra* n = new Hydra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hydra::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Hydra*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ctrl_num_, trigger_);
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
  if (GetArenaNoVirtual() == NULL && joy_ != NULL) delete joy_;
  joy_ = NULL;
  buttons_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Hydra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.Hydra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ctrl_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctrl_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .VRCom.Position pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rot;
        break;
      }

      // optional .VRCom.Rotation rot = 3;
      case 3: {
        if (tag == 26) {
         parse_rot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_joy;
        break;
      }

      // optional .VRCom.Joystick joy = 4;
      case 4: {
        if (tag == 34) {
         parse_joy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_trigger;
        break;
      }

      // optional float trigger = 5;
      case 5: {
        if (tag == 45) {
         parse_trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trigger_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buttons;
        break;
      }

      // optional int32 buttons = 6;
      case 6: {
        if (tag == 48) {
         parse_buttons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttons_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.Hydra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.Hydra)
  return false;
#undef DO_
}

void Hydra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.Hydra)
  // optional int32 ctrl_num = 1;
  if (this->ctrl_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ctrl_num(), output);
  }

  // optional .VRCom.Position pos = 2;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // optional .VRCom.Rotation rot = 3;
  if (this->has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rot_, output);
  }

  // optional .VRCom.Joystick joy = 4;
  if (this->has_joy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->joy_, output);
  }

  // optional float trigger = 5;
  if (this->trigger() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->trigger(), output);
  }

  // optional int32 buttons = 6;
  if (this->buttons() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buttons(), output);
  }

  // @@protoc_insertion_point(serialize_end:VRCom.Hydra)
}

::google::protobuf::uint8* Hydra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.Hydra)
  // optional int32 ctrl_num = 1;
  if (this->ctrl_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ctrl_num(), target);
  }

  // optional .VRCom.Position pos = 2;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->pos_, target);
  }

  // optional .VRCom.Rotation rot = 3;
  if (this->has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->rot_, target);
  }

  // optional .VRCom.Joystick joy = 4;
  if (this->has_joy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->joy_, target);
  }

  // optional float trigger = 5;
  if (this->trigger() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->trigger(), target);
  }

  // optional int32 buttons = 6;
  if (this->buttons() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buttons(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.Hydra)
  return target;
}

int Hydra::ByteSize() const {
  int total_size = 0;

  // optional int32 ctrl_num = 1;
  if (this->ctrl_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ctrl_num());
  }

  // optional .VRCom.Position pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  // optional .VRCom.Rotation rot = 3;
  if (this->has_rot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rot_);
  }

  // optional .VRCom.Joystick joy = 4;
  if (this->has_joy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->joy_);
  }

  // optional float trigger = 5;
  if (this->trigger() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 buttons = 6;
  if (this->buttons() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttons());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hydra::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Hydra* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Hydra>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hydra::MergeFrom(const Hydra& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ctrl_num() != 0) {
    set_ctrl_num(from.ctrl_num());
  }
  if (from.has_pos()) {
    mutable_pos()->::VRCom::Position::MergeFrom(from.pos());
  }
  if (from.has_rot()) {
    mutable_rot()->::VRCom::Rotation::MergeFrom(from.rot());
  }
  if (from.has_joy()) {
    mutable_joy()->::VRCom::Joystick::MergeFrom(from.joy());
  }
  if (from.trigger() != 0) {
    set_trigger(from.trigger());
  }
  if (from.buttons() != 0) {
    set_buttons(from.buttons());
  }
}

void Hydra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hydra::CopyFrom(const Hydra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hydra::IsInitialized() const {

  return true;
}

void Hydra::Swap(Hydra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hydra::InternalSwap(Hydra* other) {
  std::swap(ctrl_num_, other->ctrl_num_);
  std::swap(pos_, other->pos_);
  std::swap(rot_, other->rot_);
  std::swap(joy_, other->joy_);
  std::swap(trigger_, other->trigger_);
  std::swap(buttons_, other->buttons_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hydra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hydra_descriptor_;
  metadata.reflection = Hydra_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hydra

// optional int32 ctrl_num = 1;
void Hydra::clear_ctrl_num() {
  ctrl_num_ = 0;
}
 ::google::protobuf::int32 Hydra::ctrl_num() const {
  // @@protoc_insertion_point(field_get:VRCom.Hydra.ctrl_num)
  return ctrl_num_;
}
 void Hydra::set_ctrl_num(::google::protobuf::int32 value) {
  
  ctrl_num_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Hydra.ctrl_num)
}

// optional .VRCom.Position pos = 2;
bool Hydra::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
void Hydra::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
const ::VRCom::Position& Hydra::pos() const {
  // @@protoc_insertion_point(field_get:VRCom.Hydra.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::VRCom::Position* Hydra::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::VRCom::Position;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.Hydra.pos)
  return pos_;
}
::VRCom::Position* Hydra::release_pos() {
  
  ::VRCom::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
void Hydra::set_allocated_pos(::VRCom::Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.Hydra.pos)
}

// optional .VRCom.Rotation rot = 3;
bool Hydra::has_rot() const {
  return !_is_default_instance_ && rot_ != NULL;
}
void Hydra::clear_rot() {
  if (GetArenaNoVirtual() == NULL && rot_ != NULL) delete rot_;
  rot_ = NULL;
}
const ::VRCom::Rotation& Hydra::rot() const {
  // @@protoc_insertion_point(field_get:VRCom.Hydra.rot)
  return rot_ != NULL ? *rot_ : *default_instance_->rot_;
}
::VRCom::Rotation* Hydra::mutable_rot() {
  
  if (rot_ == NULL) {
    rot_ = new ::VRCom::Rotation;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.Hydra.rot)
  return rot_;
}
::VRCom::Rotation* Hydra::release_rot() {
  
  ::VRCom::Rotation* temp = rot_;
  rot_ = NULL;
  return temp;
}
void Hydra::set_allocated_rot(::VRCom::Rotation* rot) {
  delete rot_;
  rot_ = rot;
  if (rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.Hydra.rot)
}

// optional .VRCom.Joystick joy = 4;
bool Hydra::has_joy() const {
  return !_is_default_instance_ && joy_ != NULL;
}
void Hydra::clear_joy() {
  if (GetArenaNoVirtual() == NULL && joy_ != NULL) delete joy_;
  joy_ = NULL;
}
const ::VRCom::Joystick& Hydra::joy() const {
  // @@protoc_insertion_point(field_get:VRCom.Hydra.joy)
  return joy_ != NULL ? *joy_ : *default_instance_->joy_;
}
::VRCom::Joystick* Hydra::mutable_joy() {
  
  if (joy_ == NULL) {
    joy_ = new ::VRCom::Joystick;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.Hydra.joy)
  return joy_;
}
::VRCom::Joystick* Hydra::release_joy() {
  
  ::VRCom::Joystick* temp = joy_;
  joy_ = NULL;
  return temp;
}
void Hydra::set_allocated_joy(::VRCom::Joystick* joy) {
  delete joy_;
  joy_ = joy;
  if (joy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.Hydra.joy)
}

// optional float trigger = 5;
void Hydra::clear_trigger() {
  trigger_ = 0;
}
 float Hydra::trigger() const {
  // @@protoc_insertion_point(field_get:VRCom.Hydra.trigger)
  return trigger_;
}
 void Hydra::set_trigger(float value) {
  
  trigger_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Hydra.trigger)
}

// optional int32 buttons = 6;
void Hydra::clear_buttons() {
  buttons_ = 0;
}
 ::google::protobuf::int32 Hydra::buttons() const {
  // @@protoc_insertion_point(field_get:VRCom.Hydra.buttons)
  return buttons_;
}
 void Hydra::set_buttons(::google::protobuf::int32 value) {
  
  buttons_ = value;
  // @@protoc_insertion_point(field_set:VRCom.Hydra.buttons)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Update::kMocapFieldNumber;
const int Update::kHydraFieldNumber;
const int Update::kWiimoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Update::Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRCom.Update)
}

void Update::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Update_default_oneof_instance_->mocap_ = const_cast< ::VRCom::Mocap*>(&::VRCom::Mocap::default_instance());
  Update_default_oneof_instance_->hydra_ = const_cast< ::VRCom::Hydra*>(&::VRCom::Hydra::default_instance());
  Update_default_oneof_instance_->wiimote_ = const_cast< ::VRCom::Wiimote*>(&::VRCom::Wiimote::default_instance());
}

Update::Update(const Update& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRCom.Update)
}

void Update::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_vrmsg();
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:VRCom.Update)
  SharedDtor();
}

void Update::SharedDtor() {
  if (has_vrmsg()) {
    clear_vrmsg();
  }
  if (this != default_instance_) {
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Update_descriptor_;
}

const Update& Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VRCom_2eproto();
  return *default_instance_;
}

Update* Update::default_instance_ = NULL;

Update* Update::New(::google::protobuf::Arena* arena) const {
  Update* n = new Update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Update::clear_vrmsg() {
  switch(vrmsg_case()) {
    case kMocap: {
      delete vrmsg_.mocap_;
      break;
    }
    case kHydra: {
      delete vrmsg_.hydra_;
      break;
    }
    case kWiimote: {
      delete vrmsg_.wiimote_;
      break;
    }
    case VRMSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VRMSG_NOT_SET;
}


void Update::Clear() {
  clear_vrmsg();
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRCom.Update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .VRCom.Mocap mocap = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mocap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hydra;
        break;
      }

      // optional .VRCom.Hydra hydra = 2;
      case 2: {
        if (tag == 18) {
         parse_hydra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hydra()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wiimote;
        break;
      }

      // optional .VRCom.Wiimote wiimote = 3;
      case 3: {
        if (tag == 26) {
         parse_wiimote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wiimote()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRCom.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRCom.Update)
  return false;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRCom.Update)
  // optional .VRCom.Mocap mocap = 1;
  if (has_mocap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *vrmsg_.mocap_, output);
  }

  // optional .VRCom.Hydra hydra = 2;
  if (has_hydra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *vrmsg_.hydra_, output);
  }

  // optional .VRCom.Wiimote wiimote = 3;
  if (has_wiimote()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *vrmsg_.wiimote_, output);
  }

  // @@protoc_insertion_point(serialize_end:VRCom.Update)
}

::google::protobuf::uint8* Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRCom.Update)
  // optional .VRCom.Mocap mocap = 1;
  if (has_mocap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *vrmsg_.mocap_, target);
  }

  // optional .VRCom.Hydra hydra = 2;
  if (has_hydra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *vrmsg_.hydra_, target);
  }

  // optional .VRCom.Wiimote wiimote = 3;
  if (has_wiimote()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *vrmsg_.wiimote_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VRCom.Update)
  return target;
}

int Update::ByteSize() const {
  int total_size = 0;

  switch (vrmsg_case()) {
    // optional .VRCom.Mocap mocap = 1;
    case kMocap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *vrmsg_.mocap_);
      break;
    }
    // optional .VRCom.Hydra hydra = 2;
    case kHydra: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *vrmsg_.hydra_);
      break;
    }
    // optional .VRCom.Wiimote wiimote = 3;
    case kWiimote: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *vrmsg_.wiimote_);
      break;
    }
    case VRMSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Update* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Update>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.vrmsg_case()) {
    case kMocap: {
      mutable_mocap()->::VRCom::Mocap::MergeFrom(from.mocap());
      break;
    }
    case kHydra: {
      mutable_hydra()->::VRCom::Hydra::MergeFrom(from.hydra());
      break;
    }
    case kWiimote: {
      mutable_wiimote()->::VRCom::Wiimote::MergeFrom(from.wiimote());
      break;
    }
    case VRMSG_NOT_SET: {
      break;
    }
  }
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {

  return true;
}

void Update::Swap(Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Update::InternalSwap(Update* other) {
  std::swap(vrmsg_, other->vrmsg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Update_descriptor_;
  metadata.reflection = Update_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Update

// optional .VRCom.Mocap mocap = 1;
bool Update::has_mocap() const {
  return vrmsg_case() == kMocap;
}
void Update::set_has_mocap() {
  _oneof_case_[0] = kMocap;
}
void Update::clear_mocap() {
  if (has_mocap()) {
    delete vrmsg_.mocap_;
    clear_has_vrmsg();
  }
}
 const ::VRCom::Mocap& Update::mocap() const {
  // @@protoc_insertion_point(field_get:VRCom.Update.mocap)
  return has_mocap()
      ? *vrmsg_.mocap_
      : ::VRCom::Mocap::default_instance();
}
::VRCom::Mocap* Update::mutable_mocap() {
  if (!has_mocap()) {
    clear_vrmsg();
    set_has_mocap();
    vrmsg_.mocap_ = new ::VRCom::Mocap;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.Update.mocap)
  return vrmsg_.mocap_;
}
::VRCom::Mocap* Update::release_mocap() {
  if (has_mocap()) {
    clear_has_vrmsg();
    ::VRCom::Mocap* temp = vrmsg_.mocap_;
    vrmsg_.mocap_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Update::set_allocated_mocap(::VRCom::Mocap* mocap) {
  clear_vrmsg();
  if (mocap) {
    set_has_mocap();
    vrmsg_.mocap_ = mocap;
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.Update.mocap)
}

// optional .VRCom.Hydra hydra = 2;
bool Update::has_hydra() const {
  return vrmsg_case() == kHydra;
}
void Update::set_has_hydra() {
  _oneof_case_[0] = kHydra;
}
void Update::clear_hydra() {
  if (has_hydra()) {
    delete vrmsg_.hydra_;
    clear_has_vrmsg();
  }
}
 const ::VRCom::Hydra& Update::hydra() const {
  // @@protoc_insertion_point(field_get:VRCom.Update.hydra)
  return has_hydra()
      ? *vrmsg_.hydra_
      : ::VRCom::Hydra::default_instance();
}
::VRCom::Hydra* Update::mutable_hydra() {
  if (!has_hydra()) {
    clear_vrmsg();
    set_has_hydra();
    vrmsg_.hydra_ = new ::VRCom::Hydra;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.Update.hydra)
  return vrmsg_.hydra_;
}
::VRCom::Hydra* Update::release_hydra() {
  if (has_hydra()) {
    clear_has_vrmsg();
    ::VRCom::Hydra* temp = vrmsg_.hydra_;
    vrmsg_.hydra_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Update::set_allocated_hydra(::VRCom::Hydra* hydra) {
  clear_vrmsg();
  if (hydra) {
    set_has_hydra();
    vrmsg_.hydra_ = hydra;
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.Update.hydra)
}

// optional .VRCom.Wiimote wiimote = 3;
bool Update::has_wiimote() const {
  return vrmsg_case() == kWiimote;
}
void Update::set_has_wiimote() {
  _oneof_case_[0] = kWiimote;
}
void Update::clear_wiimote() {
  if (has_wiimote()) {
    delete vrmsg_.wiimote_;
    clear_has_vrmsg();
  }
}
 const ::VRCom::Wiimote& Update::wiimote() const {
  // @@protoc_insertion_point(field_get:VRCom.Update.wiimote)
  return has_wiimote()
      ? *vrmsg_.wiimote_
      : ::VRCom::Wiimote::default_instance();
}
::VRCom::Wiimote* Update::mutable_wiimote() {
  if (!has_wiimote()) {
    clear_vrmsg();
    set_has_wiimote();
    vrmsg_.wiimote_ = new ::VRCom::Wiimote;
  }
  // @@protoc_insertion_point(field_mutable:VRCom.Update.wiimote)
  return vrmsg_.wiimote_;
}
::VRCom::Wiimote* Update::release_wiimote() {
  if (has_wiimote()) {
    clear_has_vrmsg();
    ::VRCom::Wiimote* temp = vrmsg_.wiimote_;
    vrmsg_.wiimote_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Update::set_allocated_wiimote(::VRCom::Wiimote* wiimote) {
  clear_vrmsg();
  if (wiimote) {
    set_has_wiimote();
    vrmsg_.wiimote_ = wiimote;
  }
  // @@protoc_insertion_point(field_set_allocated:VRCom.Update.wiimote)
}

bool Update::has_vrmsg() const {
  return vrmsg_case() != VRMSG_NOT_SET;
}
void Update::clear_has_vrmsg() {
  _oneof_case_[0] = VRMSG_NOT_SET;
}
Update::VrmsgCase Update::vrmsg_case() const {
  return Update::VrmsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace VRCom

// @@protoc_insertion_point(global_scope)
